Technical Limitations
- I think we can separate the node packages on each features instead of 1 node_modules, so they will be fully modular and handle its own npm packages. I do not know what is the industry standard since I'm still not exposed unto it and this is just my own opinion is that for better scalability and orgnized always make it modular so it will not interfere with other features.
- Implement react-skeleton-loading for better loading screens.
- When logging users likes, it can be optimize more if using debounce or batchupdate.
- Add lazy loading in Matches page.
- Use request access token in some sensitive areas for security.

Fix
- Bug in confirm password when if it doesn't match and try to change in password input, the error doesn't remove.


Questions:
- When to use access token, is it need to use everytime on every api or user interaction or just like banking or like when it involve money? Does it will cause stress on the server or db if there is a million of users?
- How can I optimize saving the users location? Kapag sinave natin ang users location after 24 hrs pero paano natin malalaman na naka 24 hrs na siya without using db because that's the same sending request to dband it will clog. Im thinking of using local storage but is it okay lang ba yun since low ang security kapag local storage/